import java.util.ArrayList;
import java.util.Arrays;
import java.util.*;
import java.io.*;

public class ScalesSolutionClass {
	static ArrayList<Double> result = new ArrayList<Double>();
	
	
	public static void main(String[] args) {
		String fileLocation = "C:\\Users\\micha\\Documents\\1000_Primes.txt";
		result = CS2004.ReadNumberFile(fileLocation);
/*		result.add(2.0);
		result.add(3.0);
		result.add(5.0);
		result.add(7.0);
		result.add(11.0);
		result.add(13.0);
		result.add(17.0);*/
		for(int i=0; i<30; i++){
			ScalesSolution s2 = new ScalesSolution(SalesManSolutionRRHC(result, 25000));
			System.out.println(s2.ScalesFitness(result));
		}
	}
	
	public static ArrayList<Integer> SalesManSolutionRRHC(ArrayList<Double> weights, int iter){
		if (weights == null || weights.isEmpty()){
			return null;
		}
		if (iter<1){
			return null;
		}
		int size = weights.size();
		ScalesSolution tour = new ScalesSolution(size);
		double bestFitness= Double.MAX_VALUE;
		for(int i=0; i<15; i++){
			ScalesSolution newTour = RMHC(weights, iter/15);
			double newFitness = newTour.ScalesFitness(weights);
			if(bestFitness>newFitness){
				bestFitness = newFitness;
				tour = new ScalesSolution(newTour.GetSol());
			}
		}
		return tour.GetSol();
	}

	public static ScalesSolution RMHC(ArrayList<Double> weights,int iter)
	{
		int n= weights.size();
		ScalesSolution sol = new ScalesSolution(n);
		for (int i=0; i<iter; i++){
			ScalesSolution oldSol = new ScalesSolution(sol.GetSol());
			sol.SmallChange();
			if(sol.ScalesFitness(weights)>oldSol.ScalesFitness(weights)){
				sol = oldSol;
			}
		}
		return(sol);
	}
}

class ScalesSolution
{
	private ArrayList<Integer> scasol = new ArrayList<>();
	
	public ScalesSolution(ArrayList<Integer> list)
	{
		scasol = new ArrayList<>(list);
	}
	
	public ScalesSolution(int n){
		scasol = RandomArrayList(n);
	}
	private static ArrayList<Integer> RandomArrayList(int n)
	{
		ArrayList<Integer> temp = new ArrayList<>();
		for(int i=0; i<n; i++){
			temp.add(CS2004.UI(0, 1));
		}
		return temp;
	}
	
	public double ScalesFitness(ArrayList<Double> weights)
	{
		if (scasol.size() > weights.size()) return(-1);
		double lhs = 0.0,rhs = 0.0;
		int n = scasol.size();
		for(int i=0; i<n; i ++) {
			if(scasol.get(i)==0) {
				lhs = lhs +weights.get(i);
			}else{
				rhs = rhs +weights.get(i);
			}
		}
		return(Math.abs(lhs-rhs));
	}
	
	public void SmallChange(){
		int p = CS2004.UI(0,scasol.size()-1);
		if(scasol.get(p)==1){
			scasol.set(p, 0);
		}else{
			scasol.set(p, 1);
		}
	}

	public ArrayList<Integer> GetSol(){
		return scasol;
	}
}



class CS2004 
{
	//Shared random object
	static private Random rand;
	//Create a uniformly distributed random integer between aa and bb inclusive
	static public int UI(int aa,int bb)
	{
		int a = Math.min(aa,bb);
		int b = Math.max(aa,bb);
		if (rand == null) 
		{
			rand = new Random();
			rand.setSeed(System.nanoTime());
		}
		int d = b - a + 1;
		int x = rand.nextInt(d) + a;
		return(x);
	}
	//Create a uniformly distributed random double between a and b inclusive
	static public double UR(double a,double b)
	{
		if (rand == null) 
		{
			rand = new Random();
			rand.setSeed(System.nanoTime());
		}
		return((b-a)*rand.nextDouble()+a);
	}
	//This method reads in a text file and parses all of the numbers in it
	//This code is not very good and can be improved!
	//But it should work!!!
	//It takes in as input a string filename and returns an array list of Doubles
	static public ArrayList<Double> ReadNumberFile(String filename)
	{
		ArrayList<Double> res = new ArrayList<Double>();
		Reader r;
		try
		{
			r = new BufferedReader(new FileReader(filename));
			StreamTokenizer stok = new StreamTokenizer(r);
			stok.parseNumbers();
			stok.nextToken();
			while (stok.ttype != StreamTokenizer.TT_EOF) 
			{
				if (stok.ttype == StreamTokenizer.TT_NUMBER)
				{
					res.add(stok.nval);
				}
				stok.nextToken();
			}
		}
		catch(Exception E)
		{
			System.out.println("+++ReadFile: "+E.getMessage());
		}
	    return(res);
	}
}
